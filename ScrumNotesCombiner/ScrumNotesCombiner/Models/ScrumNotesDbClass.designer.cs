#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumNotesCombiner.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ScrumNotesCombiner")]
	public partial class ScrumNotesDbClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertScheduleStatus(ScheduleStatus instance);
    partial void UpdateScheduleStatus(ScheduleStatus instance);
    partial void DeleteScheduleStatus(ScheduleStatus instance);
    partial void InsertScrumNotesTemplate(ScrumNotesTemplate instance);
    partial void UpdateScrumNotesTemplate(ScrumNotesTemplate instance);
    partial void DeleteScrumNotesTemplate(ScrumNotesTemplate instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserStatuse(UserStatuse instance);
    partial void UpdateUserStatuse(UserStatuse instance);
    partial void DeleteUserStatuse(UserStatuse instance);
    #endregion
		
		public ScrumNotesDbClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ScrumNotesCombinerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScrumNotesDbClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScrumNotesDbClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScrumNotesDbClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScrumNotesDbClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleStatus> ScheduleStatus
		{
			get
			{
				return this.GetTable<ScheduleStatus>();
			}
		}
		
		public System.Data.Linq.Table<ScrumNotesTemplate> ScrumNotesTemplates
		{
			get
			{
				return this.GetTable<ScrumNotesTemplate>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserStatuse> UserStatuses
		{
			get
			{
				return this.GetTable<UserStatuse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Allias;
		
		private System.Nullable<int> _ProjectAdminId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EstFinishDate;
		
		private string _Comments;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<ScheduleStatus> _ScheduleStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAlliasChanging(string value);
    partial void OnAlliasChanged();
    partial void OnProjectAdminIdChanging(System.Nullable<int> value);
    partial void OnProjectAdminIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEstFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstFinishDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Project()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._ScheduleStatus = new EntitySet<ScheduleStatus>(new Action<ScheduleStatus>(this.attach_ScheduleStatus), new Action<ScheduleStatus>(this.detach_ScheduleStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allias", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Allias
		{
			get
			{
				return this._Allias;
			}
			set
			{
				if ((this._Allias != value))
				{
					this.OnAlliasChanging(value);
					this.SendPropertyChanging();
					this._Allias = value;
					this.SendPropertyChanged("Allias");
					this.OnAlliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectAdminId", DbType="Int")]
		public System.Nullable<int> ProjectAdminId
		{
			get
			{
				return this._ProjectAdminId;
			}
			set
			{
				if ((this._ProjectAdminId != value))
				{
					this.OnProjectAdminIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectAdminId = value;
					this.SendPropertyChanged("ProjectAdminId");
					this.OnProjectAdminIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstFinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstFinishDate
		{
			get
			{
				return this._EstFinishDate;
			}
			set
			{
				if ((this._EstFinishDate != value))
				{
					this.OnEstFinishDateChanging(value);
					this.SendPropertyChanging();
					this._EstFinishDate = value;
					this.SendPropertyChanged("EstFinishDate");
					this.OnEstFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Role", Storage="_Roles", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ScheduleStatus", Storage="_ScheduleStatus", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<ScheduleStatus> ScheduleStatus
		{
			get
			{
				return this._ScheduleStatus;
			}
			set
			{
				this._ScheduleStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ScheduleStatus(ScheduleStatus entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ScheduleStatus(ScheduleStatus entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ProjectId;
		
		private System.Nullable<int> _UserId;
		
		private string _Name;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProjectIdChanging(System.Nullable<int> value);
    partial void OnProjectIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int")]
		public System.Nullable<int> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Role", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleStatus")]
	public partial class ScheduleStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Allias;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _DayOfWeek;
		
		private System.Nullable<System.DateTime> _DayOfMonth;
		
		private string _Comments;
		
		private System.Nullable<System.TimeSpan> _ScheduledTime;
		
		private string _Emails;
		
		private int _ScrumTemplateId;
		
		private int _ProjectId;
		
		private EntitySet<ScrumNotesTemplate> _ScrumNotesTemplates;
		
		private EntitySet<UserStatuse> _UserStatuses;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAlliasChanging(string value);
    partial void OnAlliasChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDayOfWeekChanging(System.Nullable<System.DateTime> value);
    partial void OnDayOfWeekChanged();
    partial void OnDayOfMonthChanging(System.Nullable<System.DateTime> value);
    partial void OnDayOfMonthChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnScheduledTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnScheduledTimeChanged();
    partial void OnEmailsChanging(string value);
    partial void OnEmailsChanged();
    partial void OnScrumTemplateIdChanging(int value);
    partial void OnScrumTemplateIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    #endregion
		
		public ScheduleStatus()
		{
			this._ScrumNotesTemplates = new EntitySet<ScrumNotesTemplate>(new Action<ScrumNotesTemplate>(this.attach_ScrumNotesTemplates), new Action<ScrumNotesTemplate>(this.detach_ScrumNotesTemplates));
			this._UserStatuses = new EntitySet<UserStatuse>(new Action<UserStatuse>(this.attach_UserStatuses), new Action<UserStatuse>(this.detach_UserStatuses));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allias", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Allias
		{
			get
			{
				return this._Allias;
			}
			set
			{
				if ((this._Allias != value))
				{
					this.OnAlliasChanging(value);
					this.SendPropertyChanging();
					this._Allias = value;
					this.SendPropertyChanged("Allias");
					this.OnAlliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="Date")]
		public System.Nullable<System.DateTime> DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfMonth", DbType="Date")]
		public System.Nullable<System.DateTime> DayOfMonth
		{
			get
			{
				return this._DayOfMonth;
			}
			set
			{
				if ((this._DayOfMonth != value))
				{
					this.OnDayOfMonthChanging(value);
					this.SendPropertyChanging();
					this._DayOfMonth = value;
					this.SendPropertyChanged("DayOfMonth");
					this.OnDayOfMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> ScheduledTime
		{
			get
			{
				return this._ScheduledTime;
			}
			set
			{
				if ((this._ScheduledTime != value))
				{
					this.OnScheduledTimeChanging(value);
					this.SendPropertyChanging();
					this._ScheduledTime = value;
					this.SendPropertyChanged("ScheduledTime");
					this.OnScheduledTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emails", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Emails
		{
			get
			{
				return this._Emails;
			}
			set
			{
				if ((this._Emails != value))
				{
					this.OnEmailsChanging(value);
					this.SendPropertyChanging();
					this._Emails = value;
					this.SendPropertyChanged("Emails");
					this.OnEmailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScrumTemplateId", DbType="Int NOT NULL")]
		public int ScrumTemplateId
		{
			get
			{
				return this._ScrumTemplateId;
			}
			set
			{
				if ((this._ScrumTemplateId != value))
				{
					this.OnScrumTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ScrumTemplateId = value;
					this.SendPropertyChanged("ScrumTemplateId");
					this.OnScrumTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleStatus_ScrumNotesTemplate", Storage="_ScrumNotesTemplates", ThisKey="Id", OtherKey="SchedulingStatusId")]
		public EntitySet<ScrumNotesTemplate> ScrumNotesTemplates
		{
			get
			{
				return this._ScrumNotesTemplates;
			}
			set
			{
				this._ScrumNotesTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleStatus_UserStatuse", Storage="_UserStatuses", ThisKey="Id", OtherKey="ScheduleStatusId")]
		public EntitySet<UserStatuse> UserStatuses
		{
			get
			{
				return this._UserStatuses;
			}
			set
			{
				this._UserStatuses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ScheduleStatus", Storage="_Project", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ScheduleStatus.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ScheduleStatus.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScrumNotesTemplates(ScrumNotesTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleStatus = this;
		}
		
		private void detach_ScrumNotesTemplates(ScrumNotesTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleStatus = null;
		}
		
		private void attach_UserStatuses(UserStatuse entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleStatus = this;
		}
		
		private void detach_UserStatuses(UserStatuse entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScrumNotesTemplates")]
	public partial class ScrumNotesTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SchedulingStatusId;
		
		private string _Name;
		
		private string _Markup;
		
		private EntityRef<ScheduleStatus> _ScheduleStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSchedulingStatusIdChanging(int value);
    partial void OnSchedulingStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMarkupChanging(string value);
    partial void OnMarkupChanged();
    #endregion
		
		public ScrumNotesTemplate()
		{
			this._ScheduleStatus = default(EntityRef<ScheduleStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchedulingStatusId", DbType="Int NOT NULL")]
		public int SchedulingStatusId
		{
			get
			{
				return this._SchedulingStatusId;
			}
			set
			{
				if ((this._SchedulingStatusId != value))
				{
					if (this._ScheduleStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchedulingStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SchedulingStatusId = value;
					this.SendPropertyChanged("SchedulingStatusId");
					this.OnSchedulingStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Markup", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Markup
		{
			get
			{
				return this._Markup;
			}
			set
			{
				if ((this._Markup != value))
				{
					this.OnMarkupChanging(value);
					this.SendPropertyChanging();
					this._Markup = value;
					this.SendPropertyChanged("Markup");
					this.OnMarkupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleStatus_ScrumNotesTemplate", Storage="_ScheduleStatus", ThisKey="SchedulingStatusId", OtherKey="Id", IsForeignKey=true)]
		public ScheduleStatus ScheduleStatus
		{
			get
			{
				return this._ScheduleStatus.Entity;
			}
			set
			{
				ScheduleStatus previousValue = this._ScheduleStatus.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleStatus.Entity = null;
						previousValue.ScrumNotesTemplates.Remove(this);
					}
					this._ScheduleStatus.Entity = value;
					if ((value != null))
					{
						value.ScrumNotesTemplates.Add(this);
						this._SchedulingStatusId = value.Id;
					}
					else
					{
						this._SchedulingStatusId = default(int);
					}
					this.SendPropertyChanged("ScheduleStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Allias;
		
		private string _ADUserName;
		
		private string _Email;
		
		private string _Comments;
		
		private bool _ScrumAdmin;
		
		private EntitySet<Role> _Roles;
		
		private EntityRef<UserStatuse> _UserStatuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAlliasChanging(string value);
    partial void OnAlliasChanged();
    partial void OnADUserNameChanging(string value);
    partial void OnADUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnScrumAdminChanging(bool value);
    partial void OnScrumAdminChanged();
    #endregion
		
		public User()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._UserStatuse = default(EntityRef<UserStatuse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allias", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Allias
		{
			get
			{
				return this._Allias;
			}
			set
			{
				if ((this._Allias != value))
				{
					this.OnAlliasChanging(value);
					this.SendPropertyChanging();
					this._Allias = value;
					this.SendPropertyChanged("Allias");
					this.OnAlliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADUserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ADUserName
		{
			get
			{
				return this._ADUserName;
			}
			set
			{
				if ((this._ADUserName != value))
				{
					this.OnADUserNameChanging(value);
					this.SendPropertyChanging();
					this._ADUserName = value;
					this.SendPropertyChanged("ADUserName");
					this.OnADUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScrumAdmin", DbType="Bit NOT NULL")]
		public bool ScrumAdmin
		{
			get
			{
				return this._ScrumAdmin;
			}
			set
			{
				if ((this._ScrumAdmin != value))
				{
					this.OnScrumAdminChanging(value);
					this.SendPropertyChanging();
					this._ScrumAdmin = value;
					this.SendPropertyChanged("ScrumAdmin");
					this.OnScrumAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role", Storage="_Roles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStatuse", Storage="_UserStatuse", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public UserStatuse UserStatuse
		{
			get
			{
				return this._UserStatuse.Entity;
			}
			set
			{
				UserStatuse previousValue = this._UserStatuse.Entity;
				if (((previousValue != value) 
							|| (this._UserStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStatuse.Entity = null;
						previousValue.User = null;
					}
					this._UserStatuse.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserStatuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStatuses")]
	public partial class UserStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _UserId;
		
		private System.Nullable<int> _ScheduleStatusId;
		
		private string _Period1;
		
		private string _Period2;
		
		private string _Blockers;
		
		private EntityRef<ScheduleStatus> _ScheduleStatus;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnScheduleStatusIdChanging(System.Nullable<int> value);
    partial void OnScheduleStatusIdChanged();
    partial void OnPeriod1Changing(string value);
    partial void OnPeriod1Changed();
    partial void OnPeriod2Changing(string value);
    partial void OnPeriod2Changed();
    partial void OnBlockersChanging(string value);
    partial void OnBlockersChanged();
    #endregion
		
		public UserStatuse()
		{
			this._ScheduleStatus = default(EntityRef<ScheduleStatus>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleStatusId", DbType="Int")]
		public System.Nullable<int> ScheduleStatusId
		{
			get
			{
				return this._ScheduleStatusId;
			}
			set
			{
				if ((this._ScheduleStatusId != value))
				{
					if (this._ScheduleStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleStatusId = value;
					this.SendPropertyChanged("ScheduleStatusId");
					this.OnScheduleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Period1
		{
			get
			{
				return this._Period1;
			}
			set
			{
				if ((this._Period1 != value))
				{
					this.OnPeriod1Changing(value);
					this.SendPropertyChanging();
					this._Period1 = value;
					this.SendPropertyChanged("Period1");
					this.OnPeriod1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period2", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Period2
		{
			get
			{
				return this._Period2;
			}
			set
			{
				if ((this._Period2 != value))
				{
					this.OnPeriod2Changing(value);
					this.SendPropertyChanging();
					this._Period2 = value;
					this.SendPropertyChanged("Period2");
					this.OnPeriod2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blockers", DbType="NVarChar(MAX)")]
		public string Blockers
		{
			get
			{
				return this._Blockers;
			}
			set
			{
				if ((this._Blockers != value))
				{
					this.OnBlockersChanging(value);
					this.SendPropertyChanging();
					this._Blockers = value;
					this.SendPropertyChanged("Blockers");
					this.OnBlockersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleStatus_UserStatuse", Storage="_ScheduleStatus", ThisKey="ScheduleStatusId", OtherKey="Id", IsForeignKey=true)]
		public ScheduleStatus ScheduleStatus
		{
			get
			{
				return this._ScheduleStatus.Entity;
			}
			set
			{
				ScheduleStatus previousValue = this._ScheduleStatus.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleStatus.Entity = null;
						previousValue.UserStatuses.Remove(this);
					}
					this._ScheduleStatus.Entity = value;
					if ((value != null))
					{
						value.UserStatuses.Add(this);
						this._ScheduleStatusId = value.Id;
					}
					else
					{
						this._ScheduleStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ScheduleStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserStatuse", Storage="_User", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserStatuse = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserStatuse = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
